name: Deploy to AWS ECS

on:
  push:
    branches: [ aws, production ]
  pull_request:
    branches: [ aws ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_FRONTEND: nurtura-frontend
  ECR_REPOSITORY_WEBAPP: nurtura-webapp
  ECR_REPOSITORY_AI: nurtura-ai-moderation
  ECS_SERVICE_FRONTEND: nurtura-frontend-service
  ECS_SERVICE_WEBAPP: nurtura-webapp-service
  ECS_SERVICE_AI: nurtura-ai-service
  ECS_CLUSTER: nurtura-cluster
  ECS_TASK_DEFINITION_FRONTEND: nurtura-frontend-task
  ECS_TASK_DEFINITION_WEBAPP: nurtura-webapp-task
  ECS_TASK_DEFINITION_AI: nurtura-ai-task

jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Check TypeScript compilation
      run: npx tsc --noEmit

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Jest tests
      run: npm test -- --coverage --watchAll=false

    - name: Run Vitest tests
      run: npm run test:vitest

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json

    - name: Install backend dependencies
      run: |
        cd server
        npm ci

    - name: Wait for MongoDB
      run: |
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'

    - name: Run backend tests
      run: |
        cd server
        npm test
      env:
        MONGO_URI: mongodb://localhost:27017/nurtura-test
        JWT_SECRET: test-jwt-secret
        NODE_ENV: test

    - name: Run fuzz tests
      run: |
        cd server
        npm run test:fuzz
      env:
        MONGO_URI: mongodb://localhost:27017/nurtura-test
        JWT_SECRET: test-jwt-secret
        NODE_ENV: test

  ai-service-tests:
    name: AI Service Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: automod/requirements.txt

    - name: Install AI service dependencies
      run: |
        cd automod
        pip install -r requirements.txt

    - name: Test AI service imports
      run: |
        cd automod
        python -c "
        import torch
        import transformers
        from moderationService import initialize_moderation_service, moderate_forum_content
        print('✅ AI service imports successful')
        print(f'PyTorch version: {torch.__version__}')
        print(f'Transformers version: {transformers.__version__}')
        "

    - name: Test moderation service startup
      run: |
        cd automod
        timeout 30s python moderation_server.py &
        sleep 10
        curl -f http://localhost:8001/health || exit 1
        echo "✅ AI moderation service health check passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd server && npm ci

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: npm audit
      run: |
        npm audit --audit-level high || echo "npm audit found vulnerabilities but continuing..."
        cd server && npm audit --audit-level high || echo "server npm audit found vulnerabilities but continuing..."

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: false
        tags: nurtura-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build WebApp Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./server/Dockerfile.webapp
        push: false
        tags: nurtura-webapp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build AI Moderation Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./automod
        file: ./automod/Dockerfile
        push: false
        tags: nurtura-ai:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image functionality
      run: |
        echo "✅ All Docker images built successfully for deployment"

  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: [lint-and-format, frontend-tests, backend-tests, ai-service-tests, security-scan, docker-build-test]
    if: github.ref == 'refs/heads/aws' || github.ref == 'refs/heads/production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js for build
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies for build
      run: |
        npm ci
        cd server && npm ci

    - name: Build frontend for production
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build, tag, and push Frontend image to Amazon ECR
      id: build-frontend-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build frontend image with production build
        docker build -f Dockerfile.frontend -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "✅ Frontend image built and pushed successfully"

    - name: Build, tag, and push WebApp image to Amazon ECR
      id: build-webapp-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build webapp image
        docker build -f server/Dockerfile.webapp -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "✅ WebApp image built and pushed successfully"

    - name: Build, tag, and push AI Moderation image to Amazon ECR
      id: build-ai-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build AI moderation image
        docker build -f automod/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG automod/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "✅ AI Moderation image built and pushed successfully"

    - name: Download current task definitions
      run: |
        # Download current task definitions with error handling
        echo "📥 Downloading current task definitions..."
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FRONTEND --query taskDefinition > frontend-task-definition.json || echo "Warning: Frontend task definition not found, will create new one"
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_WEBAPP --query taskDefinition > webapp-task-definition.json || echo "Warning: WebApp task definition not found, will create new one"
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_AI --query taskDefinition > ai-task-definition.json || echo "Warning: AI task definition not found, will create new one"

    - name: Update Frontend task definition
      id: frontend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: frontend-task-definition.json
        container-name: nurtura-frontend
        image: ${{ steps.build-frontend-image.outputs.image }}

    - name: Update WebApp task definition
      id: webapp-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: webapp-task-definition.json
        container-name: nurtura-webapp
        image: ${{ steps.build-webapp-image.outputs.image }}

    - name: Update AI Moderation task definition
      id: ai-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ai-task-definition.json
        container-name: nurtura-ai-moderation
        image: ${{ steps.build-ai-image.outputs.image }}

    - name: Deploy Frontend service to Amazon ECS
      run: |
        echo "🚀 Deploying Frontend service..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE_FRONTEND \
          --task-definition ${{ steps.frontend-task-def.outputs.task-definition }} \
          --region $AWS_REGION
        
        echo "⏳ Waiting for Frontend service stability..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE_FRONTEND \
          --region $AWS_REGION
        echo "✅ Frontend service deployed successfully"

    - name: Deploy WebApp service to Amazon ECS
      run: |
        echo "🚀 Deploying WebApp service..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE_WEBAPP \
          --task-definition ${{ steps.webapp-task-def.outputs.task-definition }} \
          --region $AWS_REGION
        
        echo "⏳ Waiting for WebApp service stability..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE_WEBAPP \
          --region $AWS_REGION
        echo "✅ WebApp service deployed successfully"

    - name: Deploy AI Moderation service to Amazon ECS
      run: |
        echo "🚀 Deploying AI Moderation service..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE_AI \
          --task-definition ${{ steps.ai-task-def.outputs.task-definition }} \
          --region $AWS_REGION
        
        echo "⏳ Waiting for AI service stability..."
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE_AI \
          --region $AWS_REGION
        echo "✅ AI Moderation service deployed successfully"

    - name: Verify Deployments
      run: |
        echo "🔍 Verifying deployments..."
        
        # Check service status
        aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE_FRONTEND $ECS_SERVICE_WEBAPP $ECS_SERVICE_AI \
          --query 'services[*].[serviceName,status,runningCount,desiredCount]' --output table
        
        # Get load balancer endpoints if available
        echo "📡 Checking for load balancer endpoints..."
        aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE_FRONTEND \
          --query 'services[0].loadBalancers[0].targetGroupArn' --output text | grep -v None || echo "No load balancer configured"

    - name: Deployment Summary
      run: |
        echo "🚀 Deployment Summary"
        echo "====================="
        echo "✅ All tests passed successfully"
        echo "✅ Security scans completed"
        echo "✅ All Docker images built and pushed:"
        echo "   📦 Frontend: ${{ steps.build-frontend-image.outputs.image }}"
        echo "   📦 WebApp: ${{ steps.build-webapp-image.outputs.image }}"
        echo "   📦 AI Service: ${{ steps.build-ai-image.outputs.image }}"
        echo ""
        echo "🏗️ ECS Deployment Details:"
        echo "   🌟 Cluster: ${{ env.ECS_CLUSTER }}"
        echo "   🌍 Region: ${{ env.AWS_REGION }}"
        echo "   🔧 Services: ${{ env.ECS_SERVICE_FRONTEND }}, ${{ env.ECS_SERVICE_WEBAPP }}, ${{ env.ECS_SERVICE_AI }}"
        echo ""
        echo "✅ All services deployed successfully to AWS ECS Fargate!"
        echo "🎉 Deployment completed at $(date)"
