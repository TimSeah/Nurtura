name: Deploy to AWS ECS

on:
  push:
    branches: [ aws, production ]
  pull_request:
    branches: [ aws ]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY_FRONTEND: nurtura-frontend
  ECR_REPOSITORY_WEBAPP: nurtura-webapp
  ECR_REPOSITORY_AI: nurtura-ai-moderation
  ECS_SERVICE_FRONTEND: nurtura-frontend-service
  ECS_SERVICE_WEBAPP: nurtura-webapp-service
  ECS_SERVICE_AI: nurtura-ai-service
  ECS_CLUSTER: nurtura-cluster
  ECS_TASK_DEFINITION_FRONTEND: nurtura-frontend-task
  ECS_TASK_DEFINITION_WEBAPP: nurtura-webapp-task
  ECS_TASK_DEFINITION_AI: nurtura-ai-task

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Install backend dependencies
      run: |
        cd server
        npm ci

    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false

    - name: Run backend tests
      run: |
        cd server
        npm test

    - name: Setup Python for AI service tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Test AI service dependencies
      run: |
        cd automod
        pip install -r requirements.txt
        python -c "import torch; import transformers; print('AI dependencies OK')"

  build-and-deploy:
    name: Build and Deploy to AWS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/aws' || github.ref == 'refs/heads/production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Frontend image to Amazon ECR
      id: build-frontend-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build frontend image
        docker build -f Dockerfile.frontend -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push WebApp image to Amazon ECR
      id: build-webapp-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build webapp image
        docker build -f server/Dockerfile.webapp -t $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_WEBAPP:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push AI Moderation image to Amazon ECR
      id: build-ai-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build AI moderation image
        docker build -f automod/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG automod/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_AI:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download current task definitions
      run: |
        # Download current task definitions
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FRONTEND --query taskDefinition > frontend-task-definition.json
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_WEBAPP --query taskDefinition > webapp-task-definition.json
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_AI --query taskDefinition > ai-task-definition.json

    - name: Update Frontend task definition
      id: frontend-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: frontend-task-definition.json
        container-name: nurtura-frontend
        image: ${{ steps.build-frontend-image.outputs.image }}

    - name: Update WebApp task definition
      id: webapp-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: webapp-task-definition.json
        container-name: nurtura-webapp
        image: ${{ steps.build-webapp-image.outputs.image }}

    - name: Update AI Moderation task definition
      id: ai-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ai-task-definition.json
        container-name: nurtura-ai-moderation
        image: ${{ steps.build-ai-image.outputs.image }}

    - name: Deploy Frontend service to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-service@v1
      with:
        service: ${{ env.ECS_SERVICE_FRONTEND }}
        cluster: ${{ env.ECS_CLUSTER }}
        task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
        wait-for-service-stability: true

    - name: Deploy WebApp service to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-service@v1
      with:
        service: ${{ env.ECS_SERVICE_WEBAPP }}
        cluster: ${{ env.ECS_CLUSTER }}
        task-definition: ${{ steps.webapp-task-def.outputs.task-definition }}
        wait-for-service-stability: true

    - name: Deploy AI Moderation service to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-service@v1
      with:
        service: ${{ env.ECS_SERVICE_AI }}
        cluster: ${{ env.ECS_CLUSTER }}
        task-definition: ${{ steps.ai-task-def.outputs.task-definition }}
        wait-for-service-stability: true

    - name: Deployment Summary
      run: |
        echo "ðŸš€ Deployment Summary"
        echo "====================="
        echo "Frontend Image: ${{ steps.build-frontend-image.outputs.image }}"
        echo "WebApp Image: ${{ steps.build-webapp-image.outputs.image }}"
        echo "AI Image: ${{ steps.build-ai-image.outputs.image }}"
        echo "Cluster: ${{ env.ECS_CLUSTER }}"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "âœ… All services deployed successfully!"
